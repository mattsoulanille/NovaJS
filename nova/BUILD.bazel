package(default_visibility = ["//visibility:public"])

load("@build_bazel_rules_nodejs//:index.bzl", "nodejs_binary")
load("//:defaults.bzl", "ts_library")
load("@io_bazel_rules_docker//nodejs:image.bzl", "nodejs_image")
load("@io_bazel_rules_docker//container:container.bzl", "container_image", "container_push")
load("//:esbuild.bzl", "esbuild")

# WARNING: Using directory labels here. That means bazel can't
# detect changes to files within these directories. It only
# detects when the directories change via addition or deletion
# of files. It's necessary because the files in these directories
# have spaces in their names. See the documentation at
# https://docs.bazel.build/versions/master/build-ref.html#label_directory
filegroup(
    name = "nova_data",
    srcs = [
        "Nova_Data",
        "objects",
    ]
)

ts_library(
    name = "server",
    srcs = ["server.ts"],
    deps = [
        "@npm//@types/node",
        "@npm//express",
        "@npm//@types/express",
        "@npm//uuid",
        "@npm//@types/uuid",
        "@npm//io-ts",
        "@npm//fp-ts",
        "@npm//comlink",
        "//novaparse",
        "//nova/src/common",
        "//nova/src/communication:communication_server_lib",
        "//nova/src/communication:communication_lib",
        "//nova/src/server",
        "//nova/src/server/parsing",
        "//nova_ecs:ecs",
        "//nova_ecs/plugins",
        "//nova/src/nova_plugin",
        "//nova/src/server/parsing:nova_parse_worker_lib",
    ],
    data = [
        "//:tsconfig.json"
    ]
)

data = [
    ":server",
    "//nova/settings",
    ":nova_data",
    "//nova/src:static_files",
    "//nova/src:browser_bundle",
    "//nova/src/server/parsing:nova_parse_worker_bundle",
    # "//nova/src/communication:communication_lib",
    # "//nova/src/communication:communication_server_lib",
    #"@npm//comlink",
    #"@npm//:node_modules",
    # "//nova/src/proto:protobufjs_bundle",
    # "@npm//protobufjs",
    #"@npm_bazel_labs//protobufjs:bootstrap_scripts",
]

nodejs_binary(
    name = "nova",
    entry_point = "server.ts",
    data = data,
    # TODO: Don't patch the module resolver?
    templated_args = ["--bazel_patch_module_resolver"],
)

container_image(
    name = "port_image",
    base = "@nodejs_image_base//image",
    ports = ["8000"],
)

# To debug this, run 'bazel run -c dbg //nova:nova_image'
# Then 'docker run -it --rm --entrypoint=/bin/bash bazel/nova:nova_image' (or 'sh')
# https://github.com/bazelbuild/rules_docker#debugging-lang_image-rules
nodejs_image(
    name = "nova_image",
    binary = ":nova",
    base = ":port_image",
    node_repository_name = "nodejs_linux_amd64",
    include_node_repo_args = False,
)

container_push(
    name = "push_nova_image",
    image = ":nova_image",
    format = "Docker",
    registry = "gcr.io",
    repository = "novajs-303605/nova",
    tag = "dev",
)
